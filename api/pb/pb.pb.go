// Code generated by protoc-gen-go.
// source: pb/pb.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/pb.proto

It has these top-level messages:
	DBQuery
	QueryReply
	DeployRequest
	DeployReply
	VersionRequest
	VersionReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DBQuery struct {
	Table string `protobuf:"bytes,1,opt,name=Table,json=table" json:"Table,omitempty"`
}

func (m *DBQuery) Reset()                    { *m = DBQuery{} }
func (m *DBQuery) String() string            { return proto.CompactTextString(m) }
func (*DBQuery) ProtoMessage()               {}
func (*DBQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DBQuery) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

type QueryReply struct {
	TableContents string `protobuf:"bytes,1,opt,name=TableContents,json=tableContents" json:"TableContents,omitempty"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (m *QueryReply) String() string            { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryReply) GetTableContents() string {
	if m != nil {
		return m.TableContents
	}
	return ""
}

type DeployRequest struct {
	Deployment string `protobuf:"bytes,1,opt,name=Deployment,json=deployment" json:"Deployment,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeployRequest) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

type DeployReply struct {
}

func (m *DeployReply) Reset()                    { *m = DeployReply{} }
func (m *DeployReply) String() string            { return proto.CompactTextString(m) }
func (*DeployReply) ProtoMessage()               {}
func (*DeployReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type VersionReply struct {
	Version string `protobuf:"bytes,1,opt,name=Version,json=version" json:"Version,omitempty"`
}

func (m *VersionReply) Reset()                    { *m = VersionReply{} }
func (m *VersionReply) String() string            { return proto.CompactTextString(m) }
func (*VersionReply) ProtoMessage()               {}
func (*VersionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VersionReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*DBQuery)(nil), "DBQuery")
	proto.RegisterType((*QueryReply)(nil), "QueryReply")
	proto.RegisterType((*DeployRequest)(nil), "DeployRequest")
	proto.RegisterType((*DeployReply)(nil), "DeployReply")
	proto.RegisterType((*VersionRequest)(nil), "VersionRequest")
	proto.RegisterType((*VersionReply)(nil), "VersionReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Query(ctx context.Context, in *DBQuery, opts ...grpc.CallOption) (*QueryReply, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Query(ctx context.Context, in *DBQuery, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := grpc.Invoke(ctx, "/API/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := grpc.Invoke(ctx, "/API/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error) {
	out := new(VersionReply)
	err := grpc.Invoke(ctx, "/API/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Query(context.Context, *DBQuery) (*QueryReply, error)
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	Version(context.Context, *VersionRequest) (*VersionReply, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Query(ctx, req.(*DBQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _API_Query_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _API_Deploy_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _API_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

func init() { proto.RegisterFile("pb/pb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x53, 0x24, 0x8d, 0xbe, 0x74, 0xab, 0x0c, 0x1e, 0x4a, 0x0e, 0x5a, 0x06, 0x0f, 0x01,
	0x61, 0x0b, 0xf5, 0x17, 0xa8, 0xbd, 0x78, 0xd3, 0x20, 0xde, 0x0d, 0xce, 0x41, 0x88, 0xd9, 0x35,
	0xd9, 0x0a, 0xb9, 0xf8, 0xdb, 0xa5, 0xd9, 0x35, 0x4d, 0x8e, 0xef, 0xed, 0xcc, 0xbc, 0xef, 0x2d,
	0x52, 0x5b, 0x6e, 0x6c, 0xa9, 0x6d, 0x63, 0x9c, 0xe1, 0x6b, 0x24, 0xbb, 0x87, 0x97, 0xbd, 0x34,
	0x1d, 0x5d, 0x22, 0x7e, 0x7d, 0x2f, 0x2b, 0x59, 0xcd, 0xd6, 0xb3, 0xfc, 0xac, 0x88, 0xdd, 0x41,
	0xf0, 0x16, 0xe8, 0x9f, 0x0b, 0xb1, 0x55, 0x47, 0x37, 0x50, 0xfd, 0xcc, 0xa3, 0xa9, 0x9d, 0xd4,
	0xae, 0x0d, 0xb3, 0xca, 0x8d, 0x4d, 0xde, 0x40, 0xed, 0xc4, 0x56, 0xa6, 0x2b, 0xe4, 0x7b, 0x2f,
	0xad, 0xa3, 0x2b, 0xc0, 0x1b, 0x5f, 0x52, 0xbb, 0xb0, 0x83, 0x8f, 0xc1, 0x61, 0x85, 0xf4, 0x7f,
	0xc1, 0x56, 0x1d, 0x5f, 0x60, 0xf9, 0x26, 0x4d, 0xfb, 0x69, 0xea, 0x70, 0x80, 0x73, 0x2c, 0x06,
	0xe7, 0xc0, 0xb1, 0x42, 0x12, 0x74, 0xb8, 0x96, 0xfc, 0x78, 0xb9, 0xfd, 0xc5, 0xc9, 0xfd, 0xf3,
	0x13, 0xad, 0x11, 0xfb, 0x56, 0xa7, 0x3a, 0xf4, 0xcb, 0x52, 0x7d, 0x2c, 0xc2, 0x11, 0xe5, 0x98,
	0xfb, 0x4c, 0x5a, 0xea, 0x09, 0x6d, 0xb6, 0xd0, 0x63, 0x98, 0x88, 0x6e, 0x87, 0x30, 0x3a, 0xd7,
	0x53, 0xb0, 0x4c, 0xe9, 0x31, 0x17, 0x47, 0xe5, 0xbc, 0xff, 0xd7, 0xbb, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x3e, 0x2b, 0xcb, 0x66, 0x01, 0x00, 0x00,
}
